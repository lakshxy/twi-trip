rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== MODE TOGGLE =====
    // Change this to "true" while testing (open access)
    function isDevMode() {
      return false; // set to true for development (allows full access)
    }

    // ===== HELPER FUNCTIONS =====
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles != null &&
        'admin' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }
    
    function isModerator() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles != null &&
        ('moderator' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles ||
         'admin' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles);
    }
    
    function isValidEmail(email) {
      return email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }
    
    function isValidPhone(phone) {
      return phone.matches('^\\+?[1-9]\\d{1,14}$');
    }

    // ===== GLOBAL DEV OVERRIDE =====
    match /{document=**} {
      allow read, write: if isDevMode();
    }

    // ===== USERS =====
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
      
      // Create new user
      allow create: if isAuthenticated() &&
        request.auth.uid == userId &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.name.size() < 100;

      // Update limited fields
      allow update: if isOwner(userId) &&
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['name', 'bio', 'city', 'state', 'interests', 'languages', 
                    'travelGoals', 'profileImage', 'age', 'roles', 'purposes', 
                    'frequency', 'hosting', 'stayType', 'stayCost', 'maxGuests', 
                    'amenities', 'nextDest', 'arrival', 'duration', 'lookingFor', 
                    'connectWith', 'comms', 'updatedAt', 'profileComplete']));
    }

    // ===== PROFILES =====
    match /profiles/{profileId} {
      allow read, write: if isOwner(profileId) || isAdmin();
    }

    // ===== PROPERTIES =====
    match /properties/{propertyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.hostId == request.auth.uid &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.title.size() < 200 &&
        request.resource.data.pricePerNight > 0;
      allow update, delete: if isAuthenticated() && resource.data.hostId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== RIDES =====
    match /rides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.driverId == request.auth.uid &&
        request.resource.data.fromCity.size() > 0 &&
        request.resource.data.toCity.size() > 0 &&
        request.resource.data.availableSeats > 0;
      allow update, delete: if isAuthenticated() && resource.data.driverId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== RIDE REQUESTS =====
    match /rideRequests/{requestId} {
      allow read, write: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || resource.data.driverId == request.auth.uid);
      allow read, write: if isAdmin();
    }

    // ===== PROPERTY INTERESTS =====
    match /propertyInterests/{interestId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== MESSAGES =====
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() &&
        (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
      allow read, write: if isAdmin();

      allow create: if isAuthenticated() &&
        (request.resource.data.senderId == request.auth.uid || 
         request.resource.data.receiverId == request.auth.uid) &&
        request.resource.data.content.size() > 0 &&
        request.resource.data.content.size() < 1000;
    }

    // ===== SWIPES =====
    match /swipes/{swipeId} {
      allow read, write: if isAuthenticated() && resource.data.swiperId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== MATCHES =====
    match /matches/{matchId} {
      allow read, write: if isAuthenticated() &&
        (resource.data.user1Id == request.auth.uid || resource.data.user2Id == request.auth.uid);
      allow read, write: if isAdmin();
    }

    // ===== TOUR GUIDES =====
    match /tourGuides/{guideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.description.size() > 0;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== GROUPS =====
    match /groups/{groupId} {
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/groupMembers/$(groupId + '_' + request.auth.uid));
      allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== GROUP MEMBERS =====
    match /groupMembers/{memberId} {
      allow read, write: if isAuthenticated() && 
        memberId == resource.data.groupId + '_' + request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== ITINERARIES =====
    match /itineraries/{itineraryId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== NOTIFICATIONS =====
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // ===== BOOKINGS =====
    match /bookings/{bookingId} {
      allow read, write: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || resource.data.ownerId == request.auth.uid);
      allow read, write: if isAdmin();

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.serviceType in ['ride', 'stay', 'tour', 'group'] &&
        request.resource.data.status == 'pending';
    }

    // ===== ADMIN ONLY =====
    match /auditLogs/{logId} {
      allow read, write: if isAdmin();
    }
    match /securityAlerts/{alertId} {
      allow read, write: if isModerator();
    }
    match /systemSettings/{settingId} {
      allow read, write: if isAdmin();
    }
  }
}
